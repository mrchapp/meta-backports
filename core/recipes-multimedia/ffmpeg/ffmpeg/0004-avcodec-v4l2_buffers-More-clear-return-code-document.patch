From 6f9bff0961a76ddbd29b87a82fcb64495d97c4e8 Mon Sep 17 00:00:00 2001
From: Michael Niedermayer <michael@niedermayer.cc>
Date: Fri, 29 Sep 2017 02:28:42 +0200
Subject: [PATCH 4/7] avcodec/v4l2_buffers: More clear return code
 documentation

Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>
---
 libavcodec/v4l2_buffers.h | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/libavcodec/v4l2_buffers.h b/libavcodec/v4l2_buffers.h
index 5d25a87750..0e15bfa3cf 100644
--- a/libavcodec/v4l2_buffers.h
+++ b/libavcodec/v4l2_buffers.h
@@ -63,8 +63,8 @@ typedef struct V4L2Buffer {
  * @param[in] frame The AVFRame to push the information to
  * @param[in] buf The V4L2Buffer to get the information from
  *
- * @returns 0 in case of success, EINVAL if the number of planes is incorrect,
- * ENOMEM if the AVBufferRef cant be created.
+ * @returns 0 in case of success, AVERROR(EINVAL) if the number of planes is incorrect,
+ * AVERROR(ENOMEM) if the AVBufferRef cant be created.
  */
 int ff_v4l2_buffer_buf_to_avframe(AVFrame *frame, V4L2Buffer *buf);
 
@@ -74,8 +74,8 @@ int ff_v4l2_buffer_buf_to_avframe(AVFrame *frame, V4L2Buffer *buf);
  * @param[in] pkt The AVPacket to push the information to
  * @param[in] buf The V4L2Buffer to get the information from
  *
- * @returns 0 in case of success, EINVAL if the number of planes is incorrect,
- * ENOMEM if the AVBufferRef cant be created.
+ * @returns 0 in case of success, AVERROR(EINVAL) if the number of planes is incorrect,
+ * AVERROR(ENOMEM) if the AVBufferRef cant be created.
  *
  */
 int ff_v4l2_buffer_buf_to_avpkt(AVPacket *pkt, V4L2Buffer *buf);
@@ -86,7 +86,7 @@ int ff_v4l2_buffer_buf_to_avpkt(AVPacket *pkt, V4L2Buffer *buf);
  * @param[in]  frame AVPacket to get the data from
  * @param[in]  avbuf V4L2Bfuffer to push the information to
  *
- * @returns 0 in case of success, negative otherwise
+ * @returns 0 in case of success, a negative AVERROR code otherwise
  */
 int ff_v4l2_buffer_avpkt_to_buf(const AVPacket *pkt, V4L2Buffer *out);
 
@@ -96,7 +96,7 @@ int ff_v4l2_buffer_avpkt_to_buf(const AVPacket *pkt, V4L2Buffer *out);
  * @param[in]  frame AVFrame to get the data from
  * @param[in]  avbuf V4L2Bfuffer to push the information to
  *
- * @returns 0 in case of success, negative otherwise
+ * @returns 0 in case of success, a negative AVERROR code otherwise
  */
 int ff_v4l2_buffer_avframe_to_buf(const AVFrame *frame, V4L2Buffer* out);
 
@@ -106,7 +106,7 @@ int ff_v4l2_buffer_avframe_to_buf(const AVFrame *frame, V4L2Buffer* out);
  * @param[in]  avbuf V4L2Bfuffer to initialize
  * @param[in]  index v4l2 buffer id
  *
- * @returns 0 in case of success, negative otherwise
+ * @returns 0 in case of success, a negative AVERROR code otherwise
  */
 int ff_v4l2_buffer_initialize(V4L2Buffer* avbuf, int index);
 
@@ -115,7 +115,7 @@ int ff_v4l2_buffer_initialize(V4L2Buffer* avbuf, int index);
  *
  * @param[in] avbuf V4L2Bfuffer to push to the driver
  *
- * @returns 0 in case of success, negative otherwise
+ * @returns 0 in case of success, a negative AVERROR code otherwise
  */
 int ff_v4l2_buffer_enqueue(V4L2Buffer* avbuf);
 
-- 
2.14.2

